name: main
on: push

jobs:
  read-customer-config:
    runs-on: ubuntu-latest
    outputs:
      customers: ${{ steps.set-customers.outputs.customers }}
      
    steps:
     - name: Checkout to repository
       uses: actions/checkout@v3
        
     
     - name: Retrieve customers Configuration values
       id: set-customers
       run: |
        JSON=$(cat ./ioc.json)
         # the following lines are only required for multi line json
        JSON="${JSON//'%'/'%25'}"
        JSON="${JSON//$'\n'/'%0A'}"
        JSON="${JSON//$'\r'/'%0D'}"
        echo "::set-output name=customers::${JSON}"
        echo "${JSON}"
        
  parse-customer-config:
    runs-on: ubuntu-latest
    needs: read-customer-config
    outputs:
      customer: ${{ steps.identify.outputs.customer}}
      enabled: ${{ steps.identify.outputs.enabled}}
    strategy:
      matrix:
        ${{ insert }}: ${{ fromJson(needs.read-customer-config.outputs.customers) }}
        exclude:
          -  customers:
               enabled: false
          
        #${{ insert }}: ${{ fromJson(needs.read-customer-config.outputs.customers) }}
        #include: ${{ fromJson(needs.read-customer-config.outputs.customers) }}
        
    steps:
    - name: "test"
      run: echo ${{matrix.customers}}
      
    - name: Exit GITHUB Action 
      if: ${{ matrix.customers.enabled == '' }}
      run: exit 1
    
    - id: identify
      run: |
       export CUSTOMER="${{ matrix.customers.customer }}"
       export ENABLED="${{ matrix.customers.enabled }}"
       echo "customer=${CUSTOMER}" >> $GITHUB_OUTPUT
       echo "enabled=${ENABLED}" >> $GITHUB_OUTPUT
          
    - run: echo Run ${{ matrix}}
    - name: Login to Azure (Attempt 1)
      continue-on-error: true
      id: login1
      uses: azure/login@v1
      if: ${{ env.cloudEnv == 'AzureCloud' }}
      with:
        creds: ${{ secrets.AZURE_SENTINEL_CREDENTIALS_72d05441b30940b08d41746df9859ed1 }}
        enable-AzPSSession: true

    - name: Wait 30 seconds if login attempt 1 failed
      if: ${{ env.cloudEnv == 'AzureCloud' && steps.login1.outcome=='failure' }}
      run: powershell Start-Sleep -s 30
    

    - name: Login to Azure (Attempt 2)
      continue-on-error: true
      id: login2
      uses: azure/login@v1
      if: ${{ env.cloudEnv == 'AzureCloud' && steps.login1.outcome=='failure' }}
      with:
        creds: ${{ secrets.AZURE_SENTINEL_CREDENTIALS_72d05441b30940b08d41746df9859ed1 }}
        enable-AzPSSession: true

    - name: Wait 30 seconds if login attempt 2 failed
      if: ${{ env.cloudEnv == 'AzureCloud' && steps.login2.outcome=='failure' }}
      run: powershell Start-Sleep -s 30
    
    - name: Login to Azure (Attempt 3)
      continue-on-error: false
      id: login3
      uses: azure/login@v1
      if: ${{ env.cloudEnv == 'AzureCloud' && steps.login2.outcome=='failure'  }}
      with:
        creds: ${{ secrets.AZURE_SENTINEL_CREDENTIALS_72d05441b30940b08d41746df9859ed1 }}
        enable-AzPSSession: true

    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Deploy Content to Azure Sentinel
      uses: azure/powershell@v1

      
      with:
        azPSVersion: 'latest'
        inlineScript: |
          ${{ github.workspace }}//.github/workflows/azure-sentinel-deploy-72d05441-b309-40b0-8d41-746df9859ed1_test.ps1
      
      
  

 
    
